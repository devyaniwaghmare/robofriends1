{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","serachField","target","value","state","fetch","then","reponse","json","users","filterRobot","this","filter","toLowerCase","includes","length","data-text","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAaeA,EAZJ,SAAC,GACX,IADYC,EACb,EADaA,GAAGC,EAChB,EADgBA,KAAKC,EACrB,EADqBA,MAEpB,OACO,yBAAKC,UAAU,+CACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,yBAAKG,UAAU,MACf,4BAAKF,GACL,2BAAIC,MCMGI,EAZA,SAAC,GACf,IADiBC,EAClB,EADkBA,OAEXC,EAAUD,EAAOE,IAAI,SAACC,EAAKC,GAEhC,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,UAElB,OAAQ,6BAAMM,ICCAK,EAZC,SAAC,GAChB,IADiBC,EAClB,EADkBA,aAEjB,OACC,yBAAKX,UAAU,OACf,2BAAOA,UAAU,kCACjBY,KAAK,SACLC,YAAY,oBACZC,SAAUH,MCCGI,G,MARF,SAACC,GAGb,OACC,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC9DJ,EAAMK,YCiEMC,E,YA5Dd,aACC,IAAD,8BACC,+CAwBDC,eAAe,SAACC,GAEf,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAzBxC,EAAKC,MAAM,CACVzB,OAAO,GACPsB,YAAa,IAJf,E,iFAUC,IAAD,OAECI,MAAM,8CACLC,KAAK,SAAAC,GAEL,OAAOA,EAAQC,SAGfF,KAAK,SAAAG,GAEI,EAAKT,SAAS,CAACrB,OAAO8B,Q,+BAWvB,IAAD,OAGFC,EAAYC,KAAKP,MAAMzB,OAAOiC,OAAO,SAAAjC,GAE1C,OAAOA,EAAON,KAAKwC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,iBAGlE,OAA8B,IAA3BF,KAAKP,MAAMzB,OAAOoC,OAEJ,6CAKX,yBAAKxC,UAAU,MACf,wBAAIA,UAAU,KAAKyC,YAAU,eAA7B,eACA,kBAAC,EAAD,CAAW9B,aAAcyB,KAAKb,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAQ+B,U,GArDTO,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MACbC,SAASC,eAAe,SDwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,gB","file":"static/js/main.01abb013.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card=({id,name,email})=>\r\n{\r\n\treturn(\r\n        <div className='bg-silver dib br3 pa2 ma2 grow bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?200*200`} />\r\n        <div className='tc'>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n        </div>\r\n        </div>\r\n\t\t);\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList=({ robots })=>\r\n{\r\n\tconst cardArray=robots.map((user,i)=>\r\n\t{\r\n\t\treturn (<Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}/>)\r\n\t})\r\n\treturn (<div>{cardArray}</div>);\r\n}\r\nexport default CardList;","import React from 'react';\r\nconst SearchBox=({searchChange})=>\r\n{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input className='pa3 ba b-green bg-lightest-blue'\r\n\t\ttype=\"serach\" \r\n\t\tplaceholder=\"Serach Robots....\"\r\n\t\tonChange={searchChange}//onChange event occurs when value of element chnaged\r\n\t\t/>\r\n\t\t\r\n\t\t</div>);\r\n}\r\nexport default SearchBox;\r\n","import React from 'react';\r\nconst Scroll=(props)=>\r\n{\r\n\r\n\treturn(\r\n\t\t<div style={{overflow:'scroll',border:'5px solid black',height:'800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>);\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n//import { robots } from './robots';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n/* state */\r\nclass App extends Component\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t\t\tserachField: ''\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t/* here we set searchFeild to what we enter in serach box*/\r\n\tcomponentDidMount()\r\n\t{\r\n\t   //here i fetching data from API and covert that fechted file to .json format\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(reponse=>\r\n\t\t{\r\n\t\t\treturn reponse.json();\r\n\t\t})\r\n\t\t// here we set robots to users that we fetch from the APIs\r\n\t\t.then(users=>\r\n\t\t{\r\n            this.setState({robots:users});\r\n\t\t})\r\n\t\t\r\n\t\t\r\n\t}\r\n\tonSearchChange=(event)=>\r\n\t{\r\n\t\tthis.setState({serachField:event.target.value})\r\n\t\t\r\n\t}\r\n\r\n\trender() {\r\n\t\t/* here we comparing searchfild with robots name if they are equal then only displays that card*/\r\n\r\n\t\tconst filterRobot=this.state.robots.filter(robots=>\r\n\t\t{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.serachField.toLowerCase());\r\n\t\t})\r\n\t\t//waiting till load\r\n\t\tif(this.state.robots.length===0)\r\n\t\t{\r\n            return <h2>Loading......</h2>;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t         return(\r\n\t\t      <div className='tc'>\r\n\t\t      <h1 className=\"f1\" data-text=\"ROBOFRIENDS\">ROBOFRIENDS</h1>\r\n\t\t      <SearchBox searchChange={this.onSearchChange}/>\r\n\t\t      <Scroll>\r\n\t\t       <CardList robots={filterRobot}/>\r\n\t\t       </Scroll>\r\n\t\t       </div>\r\n\t\t      );\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />\n\t, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}